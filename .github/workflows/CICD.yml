name: TimeTrove CI/CD Pipeline

on:
  push:
    # master 브랜치에 push가 발생하면 워크플로우 실행
    branches: [ "master" ]

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  EC2_IP_ADDRESS: ${{ secrets.EC2_IP_ADDRESS }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 소스 코드 체크아웃
      - uses: actions/checkout@v4

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # 백엔드 빌드
      - name: Build Backend with Gradle
        # 테스트 제외하고 빌드
        run: |
          cd backend
          ./gradlew build -x test 

      # Node.js 설정 (프론트엔드 빌드를 위해)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 프론트엔드 빌드
      - name: Build Frontend
        env:
          REACT_APP_EC2_HOST_URL: ${{ env.EC2_IP_ADDRESS }}
        # 클린 인스톨
        run: |
          cd frontend
          npm ci 
          npm run build

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # 백엔드 Docker 이미지 빌드 및 푸시
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_HUB_USERNAME }}/timetrove-be:latest

      # 프론트엔드 Docker 이미지 빌드 및 푸시
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_HUB_USERNAME }}/timetrove-fe:latest

      # EC2 인스턴스에 배포
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        # 최신 이미지 풀
        # 기존 컨테이너 중지 및 제거
        # 새 컨테이너 시작
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USERNAME}@${EC2_IP_ADDRESS} '
            sudo docker pull ${{ env.DOCKER_HUB_USERNAME }}/timetrove-be:latest
            sudo docker pull ${{ env.DOCKER_HUB_USERNAME }}/timetrove-fe:latest
            sudo docker-compose down
            sudo docker-compose up -d
          '

      # 임시 파일 정리
      - name: Clean up
        if: always()
        run: rm -f private_key